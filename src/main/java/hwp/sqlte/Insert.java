package hwp.sqlte;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * @author Zero
 *         Created on 2017/3/21.
 */
public class Insert {
    private StandardSql sql;
    private boolean autoGeneratedKeys;
    private Connection connection;
    private Session session;
    private ResultSet resultSet;
    private List<Object[]> args = new ArrayList<>();
    private List<Object> beanArgs = new ArrayList<>();

    private PreparedStatement statement;


    public Insert(StandardSql sql, Session session) {
        this.sql = sql;
        this.session = session;
    }

    public Insert genKeys() {
        this.autoGeneratedKeys = true;
        return this;
    }

    public Insert args(Object... args) {
        this.args.add(args);
        return this;
    }

    public Insert addBeanArgs(Object bean) {
        this.beanArgs.add(bean);
        return this;
    }

    public Insert handleKeys(Consumer<ResultSet> rs) {
        if (this.autoGeneratedKeys) {
            rs.accept(this.resultSet);
        } else {
            throw new UnsupportedOperationException("当前insert操作未设置autoGeneratedKeys");
        }
        return this;
    }

    public Insert execute() throws SQLException {
        return execute(autoGeneratedKeys);
    }

    public Insert execute(boolean autoGeneratedKeys) throws SQLException {
        this.autoGeneratedKeys = autoGeneratedKeys;
        if (this.resultSet == null) {
            PreparedStatement statement = connection.prepareStatement(sql.sql(), autoGeneratedKeys ? Statement.RETURN_GENERATED_KEYS : Statement.NO_GENERATED_KEYS);
//            Savepoint savepoint = connection.setSavepoint("start");
            try {
                for (Object object : beanArgs) {
                    Object[] arg = new Object[sql.parameters().size()];
                    Map<String, Object> map = Helper.beanToArgs(object);
                    for (int i = 0; i < sql.parameters().size(); i++) {
                        NameParameter parameter = sql.parameters().get(i);
                        arg[i] = map.get(parameter.name);
                        this.args.add(arg);
                    }
                }
            } catch (Exception e) {

            }

            int batchSize = 1000;
            int size = 0;
            for (Object[] arg : args) {
                Helper.fillStatement(statement, arg);
                statement.addBatch();
                size++;
                if (size == batchSize) {
                    statement.executeBatch();
                }
            }
            if (size > 0) {
                statement.executeBatch();
            }
            if (autoGeneratedKeys) {
                this.resultSet = Helper.convert(statement.getGeneratedKeys());
            }
        }
        return this;
    }

    public static void main(String[] args) throws SQLException {
//        Insert insert = new Insert("insert user values(?,?)", null);
//        User user = new User();
//        insert.args("Zero", "123456").execute(true).handleKeys(rs -> {
//            Row row = rs.firstRow();
//            if (row != null) {
//                user.put("id", row.get("id"));
//            }
//        });

        Pattern pattern = Pattern.compile(":(\\w+)");
        Matcher matcher = pattern.matcher("insert user values(:username,:password)");
        while (matcher.find()) {
            System.out.println(matcher.group(1));
        }
        System.out.println("insert user values(:username,:password)".replaceAll(":(\\w+)", "?"));
    }


}
